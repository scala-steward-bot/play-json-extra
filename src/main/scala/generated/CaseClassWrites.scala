package play.jsonext

import play.api.libs.json.{Writes, JsPath}
import play.api.libs.functional.syntax._

object CaseClassWrites {

  def apply[A1, Z](f: Z => Option[A1])(key1: String)(implicit A1: Writes[A1]): Writes[Z] =
    Writes.at(JsPath \ key1)(A1).contramap(Function.unlift(f))

  
  def apply[A1, A2, Z](f: Z => Option[(A1, A2)])(key1: String, key2: String)(implicit A1: Writes[A1], A2: Writes[A2]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2))(Function.unlift(f))


  def apply[A1, A2, A3, Z](f: Z => Option[(A1, A2, A3)])(key1: String, key2: String, key3: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3))(Function.unlift(f))


  def apply[A1, A2, A3, A4, Z](f: Z => Option[(A1, A2, A3, A4)])(key1: String, key2: String, key3: String, key4: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, Z](f: Z => Option[(A1, A2, A3, A4, A5)])(key1: String, key2: String, key3: String, key4: String, key5: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String, key17: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16], A17: Writes[A17]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16) and Writes.at(JsPath \ key17)(A17))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String, key17: String, key18: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16], A17: Writes[A17], A18: Writes[A18]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16) and Writes.at(JsPath \ key17)(A17) and Writes.at(JsPath \ key18)(A18))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String, key17: String, key18: String, key19: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16], A17: Writes[A17], A18: Writes[A18], A19: Writes[A19]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16) and Writes.at(JsPath \ key17)(A17) and Writes.at(JsPath \ key18)(A18) and Writes.at(JsPath \ key19)(A19))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String, key17: String, key18: String, key19: String, key20: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16], A17: Writes[A17], A18: Writes[A18], A19: Writes[A19], A20: Writes[A20]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16) and Writes.at(JsPath \ key17)(A17) and Writes.at(JsPath \ key18)(A18) and Writes.at(JsPath \ key19)(A19) and Writes.at(JsPath \ key20)(A20))(Function.unlift(f))


  def apply[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, Z](f: Z => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: String, key2: String, key3: String, key4: String, key5: String, key6: String, key7: String, key8: String, key9: String, key10: String, key11: String, key12: String, key13: String, key14: String, key15: String, key16: String, key17: String, key18: String, key19: String, key20: String, key21: String)(implicit A1: Writes[A1], A2: Writes[A2], A3: Writes[A3], A4: Writes[A4], A5: Writes[A5], A6: Writes[A6], A7: Writes[A7], A8: Writes[A8], A9: Writes[A9], A10: Writes[A10], A11: Writes[A11], A12: Writes[A12], A13: Writes[A13], A14: Writes[A14], A15: Writes[A15], A16: Writes[A16], A17: Writes[A17], A18: Writes[A18], A19: Writes[A19], A20: Writes[A20], A21: Writes[A21]): Writes[Z] =
    (Writes.at(JsPath \ key1)(A1) and Writes.at(JsPath \ key2)(A2) and Writes.at(JsPath \ key3)(A3) and Writes.at(JsPath \ key4)(A4) and Writes.at(JsPath \ key5)(A5) and Writes.at(JsPath \ key6)(A6) and Writes.at(JsPath \ key7)(A7) and Writes.at(JsPath \ key8)(A8) and Writes.at(JsPath \ key9)(A9) and Writes.at(JsPath \ key10)(A10) and Writes.at(JsPath \ key11)(A11) and Writes.at(JsPath \ key12)(A12) and Writes.at(JsPath \ key13)(A13) and Writes.at(JsPath \ key14)(A14) and Writes.at(JsPath \ key15)(A15) and Writes.at(JsPath \ key16)(A16) and Writes.at(JsPath \ key17)(A17) and Writes.at(JsPath \ key18)(A18) and Writes.at(JsPath \ key19)(A19) and Writes.at(JsPath \ key20)(A20) and Writes.at(JsPath \ key21)(A21))(Function.unlift(f))

}

